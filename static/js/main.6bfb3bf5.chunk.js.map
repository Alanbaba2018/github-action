{"version":3,"sources":["charts/lockAmount.js","App.js","reportWebVitals.js","index.js"],"names":["getSeries","a","b","c","d","series","day","start","Date","prev","e","f","Math","floor","min","amount","push","round","LockAmount","chartRef","useRef","Form","useForm","form","useState","setSeries","useEffect","chartInstance","echarts","current","option","color","title","text","left","textStyle","tooltip","trigger","axisPointer","type","label","backgroundColor","grid","show","right","bottom","containLabel","xAxis","boundaryGap","splitLine","yAxis","name","smooth","emphasis","focus","data","setOption","className","layout","initialValues","ratio","interval","times","onValuesChange","console","log","getFieldsValue","Item","span","size","placeholder","defaultValue","addonAfter","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bfb3bf5.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport * as echarts from \"echarts\"\nimport { Form, Input, Row, Col } from 'antd';\nimport './lockAmount.css';\n\nconst Title = '每日最大流通量'\n//1 2 3  4  5   \n// 4 7 10 13 16 19 \nconst getSeries = (a, b, c, d) => {\n  const series = []\n  let day = 0\n  const start = +new Date(2022, 7, 1)\n  let prev = 0\n  while(true) {\n    let e = 0\n    if (day >= c && day % c === 0) {\n      const f = Math.floor(day / c)\n      e = Math.min(d, f ) * c * a * (100 - b) * 0.01  / d\n    }\n    const amount = a * (b * 0.01) + e\n    series.push([start + day * 24 * 3600 * 1000, Math.round(prev + amount)])\n    if (prev > 35000000) break\n    prev+=amount\n    day++\n  }\n  return series\n}\n\nconst LockAmount = () => {\n  const chartRef = useRef()\n  const [form] = Form.useForm()\n  const [series, setSeries] = useState(getSeries(50000, 5, 3, 60))\n\n  const onFormChange = () => {\n    console.log(form.getFieldsValue())\n    const { amount, ratio, interval, times } = form.getFieldsValue()\n    if (+amount && +ratio && +interval && +times) {\n      setSeries(getSeries(+amount, +ratio, +interval, +times))\n    }\n  }\n  \n\n  useEffect(() => {\n    const chartInstance = echarts.init(chartRef.current)\n    const option = {\n      color: ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'],\n      title: {\n        text: Title,\n        left: 'center',\n        textStyle: {\n          color: '#FFFFFF'\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n          label: {\n            backgroundColor: '#6a7985'\n          }\n        }\n      },\n      grid: {\n        show: false,\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis: [\n        {\n          type: 'time',\n          boundaryGap: false,\n          splitLine:{\n            show:false\n      　　 }\n        }\n      ],\n      yAxis: [\n        {\n          type: 'value',\n          splitLine:{\n            show:false\n      　　 }\n        }\n      ],\n      series: [\n        {\n          name: '解锁量',\n          type: 'line',\n          smooth: true,\n          emphasis: {\n            focus: 'series'\n          },\n          data: series\n        }\n      ]\n    }\n    chartInstance.setOption(option)\n  }, [series])\n  return <div className=\"chart-wrap\">\n    <div className=\"chart-header\">\n      <Form\n        form={form}\n        layout=\"inline\"\n        initialValues={{ amount: '50000', ratio: '5', interval: '3', times: '60' }}\n        onValuesChange={onFormChange}\n      >\n        <Form.Item name=\"amount\" label=\"每日产出\" className=\"chart-header-label\">\n          <Row>\n            <Col span={18}>\n              <Input size=\"small\" placeholder=\"daily lock number\" defaultValue={50000} />\n            </Col>\n          </Row>\n        </Form.Item>\n        \n        <Form.Item name=\"ratio\" label=\"首次解锁\" className=\"chart-header-label\">\n          <Row>\n            <Col span={12}>\n              <Input size=\"small\" placeholder=\"First unlock ratio\" defaultValue={5} addonAfter=\"%\" />\n            </Col>\n          </Row>\n        </Form.Item>\n\n        <Form.Item name=\"interval\" label=\"解锁间隔\" className=\"chart-header-label\">\n          <Row>\n            <Col span={12}>\n              <Input size=\"small\" placeholder=\"unlock interval\" defaultValue={3} addonAfter=\"天\" />\n            </Col>\n          </Row>\n        </Form.Item>\n\n        <Form.Item name=\"times\" label=\"解锁次数\" className=\"chart-header-label\">\n          <Row>\n            <Col span={12}>\n              <Input size=\"small\" placeholder=\"unlock times\" defaultValue={60} addonAfter=\"天\" />\n            </Col>\n          </Row>\n        </Form.Item>\n\n      </Form>\n    </div>\n    <div ref={chartRef} className=\"chart-container\" />\n  </div>\n}\n\nexport { LockAmount }","import React from 'react'\nimport './App.css';\nimport { LockAmount } from './charts'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <div className=\"line-container\">\n        <LockAmount />\n      </div>\n      <div className=\"line-container\">\n        <LockAmount />\n      </div>\n      <div className=\"line-container\">\n        <LockAmount />\n      </div>\n      <div className=\"line-container\">\n        <LockAmount />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}